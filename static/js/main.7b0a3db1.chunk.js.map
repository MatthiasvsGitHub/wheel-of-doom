{"version":3,"sources":["components/wheel/index.js","index.js"],"names":["Wheel","props","state","selectedItem","selectItem","bind","this","Math","floor","random","items","length","onSelectItem","setState","setTimeout","wheelVars","spinning","className","style","onClick","map","item","index","React","Component","App","useState","names","setNames","useEffect","document","title","type","size","placeholder","onKeyUp","event","key","target","value","newNames","includes","i","splice","alert","currentTarget","push","rootElement","getElementById","ReactDOM","render"],"mappings":"iTAIqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,aAAc,MAEhB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBALD,E,8CAQnB,WACE,GAAgC,OAA5BC,KAAKJ,MAAMC,aAAuB,CACpC,IAAMA,EAAeI,KAAKC,MAAMD,KAAKE,SAAWH,KAAKL,MAAMS,MAAMC,QAC7DL,KAAKL,MAAMW,cACbN,KAAKL,MAAMW,aAAaT,GAE1BG,KAAKO,SAAS,CAAEV,sBAEhBG,KAAKO,SAAS,CAAEV,aAAc,OAC9BW,WAAWR,KAAKF,WAAY,M,oBAOhC,WAAU,IACAD,EAAiBG,KAAKJ,MAAtBC,aACAO,EAAUJ,KAAKL,MAAfS,MAEFK,EAAY,CAChB,YAAaL,EAAMC,OACnB,kBAAmBR,GAEfa,EAA4B,OAAjBb,EAAwB,WAAa,GAEtD,OACE,qBAAKc,UAAU,kBAAf,SACE,qBAAKA,UAAS,gBAAWD,GAAYE,MAAOH,EAAWI,QAASb,KAAKF,WAArE,SACGM,EAAMU,KAAI,SAACC,EAAMC,GAAP,OACT,qBAAKL,UAAU,aAAyBC,MAAO,CAAE,YAAaI,GAA9D,SACGD,GAD8BC,c,GAvCVC,IAAMC,W,MCClC,SAASC,IAAO,IAAD,EACMC,mBAAS,CAAC,UAAW,UAAW,SAAU,SAAU,OAAQ,SAAU,OAAQ,QAAS,SAAU,UAAQ,QAAS,OAAQ,SAAU,OAAQ,aADlJ,mBACbC,EADa,KACNC,EADM,KA+BpB,OAJAC,qBAAU,WACRC,SAASC,MAAQ,kBAChB,IAGD,sBAAKd,UAAU,MAAf,UACE,wDACA,uBAAOe,KAAK,OAAOC,KAAK,KAAKC,YAAY,uBAAuBC,QA/BlD,SAACC,GACjB,GAAkB,UAAdA,EAAMC,KAA0C,KAAvBD,EAAME,OAAOC,MAAc,CACtD,IAAMC,EAAQ,YAAOb,GACrB,GAAIa,EAASC,SAASL,EAAME,OAAOC,OACjC,IAAK,IAAIG,EAAI,EAAGA,EAAIF,EAAS7B,OAAQ+B,IAC/BF,EAASE,KAAON,EAAME,OAAOC,QAC/BC,EAASG,OAAOD,EAAG,GACnBd,EAASY,GACTE,IACAE,MAAM,GAAD,OAAIR,EAAME,OAAOC,MAAjB,8CACLH,EAAMS,cAAcN,MAAQ,SAKhCC,EAASM,KAAKV,EAAME,OAAOC,OAC3BX,EAASY,GACTI,MAAM,GAAD,OAAIR,EAAME,OAAOC,MAAjB,0CACLH,EAAMS,cAAcN,MAAQ,OAc9B,cAAC,EAAD,CAAO7B,MAAOiB,OAMpB,IAAMoB,EAAcjB,SAASkB,eAAe,QAC5CC,IAASC,OAAO,cAACzB,EAAD,IAASsB,K","file":"static/js/main.7b0a3db1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './index.css';\r\n\r\nexport default class Wheel extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedItem: null,\r\n    };\r\n    this.selectItem = this.selectItem.bind(this);\r\n  }\r\n\r\n  selectItem() {\r\n    if (this.state.selectedItem === null) {\r\n      const selectedItem = Math.floor(Math.random() * this.props.items.length);\r\n      if (this.props.onSelectItem) {\r\n        this.props.onSelectItem(selectedItem);\r\n      }\r\n      this.setState({ selectedItem });\r\n    } else {\r\n      this.setState({ selectedItem: null });\r\n      setTimeout(this.selectItem, 10);\r\n    }\r\n  }\r\n/*   displayWinner() {\r\n    console.log(`The Winner is: ${selectedItem}`)\r\n  } */\r\n\r\n  render() {\r\n    const { selectedItem } = this.state;\r\n    const { items } = this.props;\r\n\r\n    const wheelVars = {\r\n      '--nb-item': items.length,\r\n      '--selected-item': selectedItem,\r\n    };\r\n    const spinning = selectedItem !== null ? 'spinning' : '';\r\n\r\n    return (\r\n      <div className=\"wheel-container\">\r\n        <div className={`wheel ${spinning}`} style={wheelVars} onClick={this.selectItem}>\r\n          {items.map((item, index) => (\r\n            <div className=\"wheel-item\" key={index} style={{ '--item-nb': index }}>\r\n              {item}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Wheel from './components/wheel';\r\nimport './styles.css';\r\n\r\nexport function App() {\r\n  const [names, setNames] = useState(['Clemens', 'Stavros', 'Utsavi', 'Robert', 'Said', 'Carole', 'Arno', 'Aryan', 'Dipali', 'Ã–mer', 'Brian', 'Joey', 'Jasmin', 'Safi', 'Matthias'])\r\n\r\n  const addRemove = (event) => {\r\n    if (event.key === \"Enter\" && event.target.value !== \"\") {\r\n      const newNames = [...names]\r\n      if (newNames.includes(event.target.value)) {\r\n        for (let i = 0; i < newNames.length; i++) {\r\n          if (newNames[i] === event.target.value) {\r\n            newNames.splice(i, 1);\r\n            setNames(newNames)\r\n            i--;\r\n            alert(`${event.target.value} has been removed from the Wheel of Doom!`)\r\n            event.currentTarget.value = \"\";\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        newNames.push(event.target.value)\r\n        setNames(newNames)\r\n        alert(`${event.target.value} has been added to the Wheel of Doom!`)\r\n        event.currentTarget.value = \"\";\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.title = \"Wheel of Doom\"\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Yacine's Wheel of Doom</h1>\r\n      <input type=\"text\" size=\"21\" placeholder=\"Add or Remove a Name\" onKeyUp={addRemove} />\r\n      <Wheel items={names} />\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nconst rootElement = document.getElementById('root');\r\nReactDOM.render(<App />, rootElement);"],"sourceRoot":""}